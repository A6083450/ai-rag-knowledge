根据如描述说明，帮我编写一款简单的AI对话页面。
1. 请编写html、js、tailwindcss UI 效果。不要写react、vue。
2. 点击新建聊天，会创建一个新的加入左侧的聊天列表
3. 聊天列表可以点击展开选择。
4. 选择的聊天，在对话列表中，可以点击删除或者重命名。
5. 输入内容，点击发送按钮和使用快捷键，调用服务端的聊天GET流式请求接口，前端渲染展示。
6. 以html、js代码方式实现，css样式使用 tailwind 编写。
7. 通过 const eventSource = new EventSource(apiUrl); 调用api接口。
8. 从 $.result.output.text 获取，应答的文本展示。注意 content 可能为空。
9. 从 $.result.metadata.finishReason = STOP 获取，结束标识。
10. 注意整体样式的简洁美观。

页面加载后自动从以下接口获取知识库供用户选择
@RequestMapping(value = "http://localhost:8090/api/v1/rag/query_rag_tag_list", method = RequestMethod.GET)
@Override
public Response<List<String>> queryRagTagList() {}
返回数据格式示例为:
{
  "code": "0000",
  "info": "调用成功",
  "data": [
    "myTag"
  ]
}

接口信息如下

聊天GET流式请求接口，由 SpringBoot Spring AI 框架实现，如下；

@GetMapping(value = "http://localhost:8090/api/v1/ollama/generate_stream_rag", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
@Override
public Flux<ChatResponse> generateStreamRag(String model, String ragTag, String message) {}

		流式GET应答数据，对象中的一条对象数据；

		{
		    "result": {
		        "output": {
		            "messageType": "ASSISTANT",
		            "metadata": {
		                "messageType": "ASSISTANT"
		            },
		            "toolCalls": [],
		            "media": [],
		            "text": "<think>"
		        },
		        "metadata": {
		            "finishReason": null,
		            "contentFilters": [],
		            "empty": true
		        }
		    },
		    "metadata": {
		        "id": "",
		        "model": "deepseek-r1:1.5b",
		        "rateLimit": {
		            "requestsLimit": 0,
		            "requestsRemaining": 0,
		            "requestsReset": "PT0S",
		            "tokensRemaining": 0,
		            "tokensLimit": 0,
		            "tokensReset": "PT0S"
		        },
		        "usage": {
		            "promptTokens": 0,
		            "completionTokens": 0,
		            "totalTokens": 0
		        },
		        "promptMetadata": [],
		        "empty": false
		    },
		    "results": [
		        {
		            "output": {
		                "messageType": "ASSISTANT",
		                "metadata": {
		                    "messageType": "ASSISTANT"
		                },
		                "toolCalls": [],
		                "media": [],
		                "text": "<think>"
		            },
		            "metadata": {
		                "finishReason": null,
		                "contentFilters": [],
		                "empty": true
		            }
		        }
		    ]
		}
然后流式获取sse返回的数据在聊天界面上展示
注意：请处理 {<think> </think>} 为思考过程可以展开或隐藏，例如返回的消息如下 <think> 思考中，我正在思考</think> 您好！我是由中国的深度求索（DeepSeek）公司开发的智能助手DeepSeek-R1。如您有任何任何问题，我会尽我所能为您提供帮助。
